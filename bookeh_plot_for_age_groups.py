# -*- coding: utf-8 -*-
"""Bookeh_plot_for_age_groups.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dfez1qnBp9s1W2qARa-Bsu7ONFrNTX_a

## Code to plot the bookeh plots
"""

import pandas as pd

# Load the Excel file
file_path = './MCDI_word_counts_for_age_groups.xlsx'
xls = pd.ExcelFile(file_path)

# Age groups represented by their upper limits
age_groups = [3, 6, 9, 12, 18, 24, 30]

# Initialize empty dataframes
mcdi_df = pd.DataFrame()
non_mcdi_df = pd.DataFrame()

# Loop through each age group and process the data
for age in age_groups:
    # Load MCDI and All_Words data for the current age group
    mcdi_words = pd.read_excel(xls, sheet_name=f'{age}_MCDI_Words')
    all_words = pd.read_excel(xls, sheet_name=f'{age}_All_Words')

    # Add an Age_group column to both dataframes
    mcdi_words['Age_group'] = age
    all_words['Age_group'] = age

    # Append MCDI words to mcdi_df
    mcdi_df = pd.concat([mcdi_df, mcdi_words], ignore_index=True)

    # Filter out MCDI words from All_Words to get non-MCDI words
    non_mcdi_words = all_words[~all_words['Word'].isin(mcdi_words['Word'])]
    non_mcdi_df = pd.concat([non_mcdi_df, non_mcdi_words], ignore_index=True)

# Add a 'Category' column to distinguish MCDI and NON-MCDI data
mcdi_df['Category'] = 'MCDI'
non_mcdi_df['Category'] = 'NON-MCDI'

age_group_data = {
        'Age_group': [3, 6, 9, 12, 18, 24, 30],
        'Total Duration (min)': [1605.721667, 1912.675667, 2083.6075, 1511.8625, 1655.442667, 2105.196167, 1339.991167],
        'wake_time': [8, 8, 12, 12, 14, 14, 14]
    }

df_age_group = pd.DataFrame(age_group_data)

mcdi_df = pd.merge(df_age_group, mcdi_df, on='Age_group')
non_mcdi_df = pd.merge(df_age_group, non_mcdi_df, on='Age_group')

# Calculate the extended count
mcdi_df['extended count'] = (mcdi_df['wake_time'] * mcdi_df['Count']) / (mcdi_df['Total Duration (min)'] / 60)
non_mcdi_df['extended count'] = (non_mcdi_df['wake_time'] * non_mcdi_df['Count']) / (non_mcdi_df['Total Duration (min)'] / 60)

# Sort data by Word and Age_group to ensure cumulative calculation across age progression
mcdi_df = mcdi_df.sort_values(['Word', 'Age_group'])
non_mcdi_df = non_mcdi_df.sort_values(['Word', 'Age_group'])

# Calculate the cumulative count across age progression for each word in MCDI and NON-MCDI data
mcdi_df['Cumulative_count'] = mcdi_df.groupby('Word')['Count'].cumsum()
mcdi_df['Extended Cumulative_count'] = mcdi_df.groupby('Word')['extended count'].cumsum()

non_mcdi_df['Cumulative_count'] = non_mcdi_df.groupby('Word')['Count'].cumsum()
non_mcdi_df['Extended Cumulative_count'] = non_mcdi_df.groupby('Word')['extended count'].cumsum()

mcdi_df[mcdi_df['Word']=='dog']

import pandas as pd
import numpy as np
from bokeh.palettes import Category10
from bokeh.plotting import figure, show
from bokeh.models import Range1d,Paragraph, Panel, Tabs, Column, FixedTicker
from bokeh.layouts import row,column

data = {
    'Age_group': [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    'animal': [0.03, 0.06, 0.10, 0.20, 0.21, 0.30, 0.32, 0.46, 0.49, 0.54, 0.57, 0.59, 0.67, 0.71, 0.79],
    'bug': [0.10, 0.14, 0.22, 0.41, 0.40, 0.43, 0.52, 0.60, 0.65, 0.69, 0.73, 0.74, 0.78, 0.78, 0.83],
    'bird': [0.32, 0.43, 0.50, 0.66, 0.66, 0.74, 0.72, 0.80, 0.85, 0.88, 0.90, 0.89, 0.90, 0.90, 0.95],
    'butterfly': [0.06, 0.09, 0.14, 0.24, 0.27, 0.35, 0.42, 0.55, 0.61, 0.64, 0.64, 0.68, 0.74, 0.82, 0.86],
    'cat': [0.35, 0.44, 0.46, 0.62, 0.66, 0.70, 0.77, 0.83, 0.84, 0.87, 0.87, 0.93, 0.87, 0.93, 0.96],
    'dog': [0.62, 0.68, 0.75, 0.79, 0.82, 0.84, 0.84, 0.91, 0.91, 0.93, 0.92, 0.94, 0.94, 0.95, 0.96],
    'elephant': [0.06, 0.11, 0.17, 0.29, 0.31, 0.35, 0.50, 0.58, 0.66, 0.65, 0.69, 0.75, 0.77, 0.81, 0.88],
    'fish (animal)': [0.21, 0.32, 0.38, 0.53, 0.56, 0.57, 0.70, 0.74, 0.80, 0.84, 0.83, 0.86, 0.90, 0.91, 0.93]
}
animal_Data = pd.DataFrame(data)

animals = ["animal", "bird", "bug", "butterfly", "cat", "dog", "elephant", "fish"]

p1 = figure(width=800, height=550)
p1.title.text = 'Animals'
p1.x_range = Range1d(0,30)
p1.xaxis.axis_label = 'Age Group (Months)'
p1.yaxis.axis_label = 'Cumulative Cumulative Count'
xticks = np.array([0, 3, 6, 9, 12, 18, 24, 30])
p1.xaxis.ticker = FixedTicker(ticks=xticks)
for word, color in zip(animals, Category10[10]):
    df = mcdi_df[mcdi_df['Word'] == word]
    p1.line(df['Age_group'], df['Extended Cumulative_count'], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

p1.legend.location = "top_left"
p1.legend.click_policy="mute"

#show(p1)

# Set up the figure
p11 = figure(width=800, height=550)
p11.title.text = 'Animals'
p11.x_range = Range1d(16, 30)
p11.xaxis.axis_label = 'Age Group (Months)'
p11.yaxis.axis_label = 'Proportion of children producing'
xticks = np.array([16, 18, 20, 22, 24, 26, 28, 30])
p11.xaxis.ticker = FixedTicker(ticks=xticks)

# Plot lines for each word
animals = animal_Data.columns[1:]  # Exclude 'Age_group'
for word, color in zip(animals, Category10[len(animals)]):
    p11.line(animal_Data['Age_group'], animal_Data[word], line_width=2, color=color, alpha=0.8,
            muted_color=color, muted_alpha=0.2, legend_label=word)

# Configure legend
p11.legend.location = "bottom_right"
p11.legend.click_policy = "mute"

# Display the plot
#show(p11)

# Combine the plots into a single layout
layout = row(children=[p1,p11], sizing_mode="scale_width")  # Stacks plots vertically

# Add the layout to a tab
tab1 = Panel(child=layout, title="Animals")

# Define the data
data = {
    'age': [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    'airplane': [0.13, 0.20, 0.30, 0.44, 0.48, 0.55, 0.61, 0.70, 0.77, 0.81, 0.82, 0.85, 0.88, 0.90, 0.93],
    'bicycle': [0.09, 0.15, 0.21, 0.32, 0.36, 0.42, 0.52, 0.61, 0.67, 0.71, 0.73, 0.75, 0.81, 0.84, 0.90],
    'boat': [0.17, 0.21, 0.29, 0.45, 0.44, 0.51, 0.58, 0.72, 0.74, 0.75, 0.80, 0.79, 0.86, 0.87, 0.91],
    'bus': [0.15, 0.20, 0.25, 0.39, 0.41, 0.47, 0.60, 0.71, 0.76, 0.76, 0.76, 0.82, 0.84, 0.89, 0.92],
    'car': [0.35, 0.47, 0.55, 0.70, 0.76, 0.77, 0.77, 0.88, 0.92, 0.90, 0.92, 0.93, 0.94, 0.95, 0.97],
    'train': [0.11, 0.17, 0.24, 0.37, 0.47, 0.48, 0.56, 0.69, 0.77, 0.77, 0.82, 0.81, 0.87, 0.88, 0.93],
    'truck': [0.27, 0.31, 0.40, 0.55, 0.56, 0.62, 0.68, 0.78, 0.81, 0.83, 0.85, 0.86, 0.88, 0.92, 0.93]
}

# Convert the data to a DataFrame
df = pd.DataFrame(data)

# Create a new figure
p22 = figure(width=800, height=550)
p22.title.text = 'Proportion of Children Producing Each Vehicle Type'
p22.xaxis.axis_label = 'Age (Months)'
p22.yaxis.axis_label = 'Proportion of Children Producing'
p22.x_range = Range1d(16, 30)

# Define x-axis ticks
xticks = list(df['age'])
p22.xaxis.ticker = FixedTicker(ticks=xticks)

# Plot each vehicle type with a unique color
vehicles = df.columns[1:]
for vehicle, color in zip(vehicles, Category10[len(vehicles)]):
    p22.line(df['age'], df[vehicle], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=vehicle)

# Configure legend
p22.legend.location = "bottom_right"
p22.legend.click_policy = "mute"

# Show the plot
#show(p22)

vehicles = ["airplane", "bicycle", "boat", "bus", "car", "train", "truck"]

p2 = figure(width=800, height=550)
p2.title.text = 'Vehicles'
p2.x_range = Range1d(0,40)
p2.xaxis.axis_label = 'Age Group (Months)'
p2.yaxis.axis_label = 'Cumulative Extended Count'
xticks = np.array([0, 3, 6, 9, 12, 18, 24, 30])
p2.xaxis.ticker = FixedTicker(ticks=xticks)
for word, color in zip(vehicles, Category10[10]):
    df = mcdi_df[mcdi_df['Word'] == word]
    p2.line(df['Age_group'], df['Extended Cumulative_count'], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

p2.legend.location = "top_left"
p2.legend.click_policy="mute"

#show(p2)

layout = row(children=[p2,p22], sizing_mode="scale_width")

# Add the layout to a tab
tab2 = Panel(child=layout, title="Vehicles")

# Define the data
data = {
    'age': [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    'ball': [0.73, 0.80, 0.85, 0.91, 0.93, 0.93, 0.95, 0.96, 0.96, 0.97, 0.95, 0.97, 0.96, 0.96, 0.98],
    'balloon': [0.29, 0.39, 0.46, 0.61, 0.65, 0.67, 0.68, 0.79, 0.84, 0.86, 0.87, 0.88, 0.90, 0.92, 0.94],
    'bat': [0.05, 0.05, 0.10, 0.14, 0.18, 0.20, 0.24, 0.29, 0.36, 0.39, 0.44, 0.42, 0.54, 0.55, 0.55],
    'book': [0.44, 0.57, 0.63, 0.74, 0.77, 0.79, 0.82, 0.85, 0.91, 0.89, 0.89, 0.92, 0.92, 0.93, 0.97],
    'crayon': [0.03, 0.08, 0.13, 0.28, 0.25, 0.36, 0.46, 0.51, 0.57, 0.67, 0.65, 0.70, 0.74, 0.79, 0.83],
    'game': [0.01, 0.02, 0.05, 0.09, 0.10, 0.15, 0.24, 0.27, 0.32, 0.43, 0.43, 0.48, 0.62, 0.63, 0.74],
    'pencil': [0.01, 0.04, 0.06, 0.16, 0.16, 0.24, 0.24, 0.34, 0.34, 0.43, 0.48, 0.50, 0.58, 0.61, 0.69],
    'toy (object)': [0.13, 0.16, 0.24, 0.36, 0.43, 0.48, 0.52, 0.64, 0.68, 0.75, 0.76, 0.79, 0.82, 0.87, 0.93]
}

# Convert the data to a DataFrame
df = pd.DataFrame(data)

# Create a new figure
p33 = figure(width=800, height=550)
p33.title.text = 'Proportion of Children Producing Each Toy Type'
p33.xaxis.axis_label = 'Age (Months)'
p33.yaxis.axis_label = 'Proportion of Children Producing'
p33.x_range = Range1d(16, 30)

# Define x-axis ticks
xticks = list(df['age'])
p33.xaxis.ticker = FixedTicker(ticks=xticks)

# Plot each toy/object type with a unique color
toys_objects = df.columns[1:]  # Skip 'form' and 'age' columns
for toy, color in zip(toys_objects, Category10[len(toys_objects)]):
    p33.line(df['age'], df[toy], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=toy)

# Configure legend
p33.legend.location = "bottom_right"
p33.legend.click_policy = "mute"

# Show the plot
#show(p33)

toys = ["ball", "balloon", "bat", "book", "crayon", "game", "pencil", "toy"]

p3 = figure(width=800, height=550)
p3.title.text = 'Toys'
p3.x_range = Range1d(0,40)
p3.xaxis.axis_label = 'Age Group (Months)'
p3.yaxis.axis_label = 'Cumulative Extended Count'
xticks = np.array([0, 3, 6, 9, 12, 18, 24, 30])
p3.xaxis.ticker = FixedTicker(ticks=xticks)
for word, color in zip(toys, Category10[10]):
    df = mcdi_df[mcdi_df['Word'] == word]
    p3.line(df['Age_group'], df['Extended Cumulative_count'], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

p3.legend.location = "top_left"
p3.legend.click_policy="mute"

#show(p3)

layout = row(children=[p3,p33], sizing_mode="scale_width")

# Add the layout to a tab
tab3 = Panel(child=layout, title="Toys")

from bokeh.plotting import figure, show
from bokeh.models import FixedTicker, Range1d
from bokeh.palettes import Category10
import pandas as pd

# Define the data
data = {
    'age': [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    'apple': [0.29, 0.37, 0.48, 0.64, 0.60, 0.68, 0.78, 0.86, 0.87, 0.89, 0.88, 0.91, 0.92, 0.93, 0.95],
    'banana': [0.45, 0.53, 0.63, 0.69, 0.71, 0.75, 0.80, 0.89, 0.90, 0.91, 0.90, 0.92, 0.91, 0.94, 0.98],
    'bread': [0.09, 0.15, 0.20, 0.36, 0.37, 0.42, 0.51, 0.61, 0.67, 0.70, 0.74, 0.74, 0.82, 0.86, 0.91],
    'butter': [0.02, 0.04, 0.09, 0.14, 0.18, 0.25, 0.28, 0.41, 0.43, 0.49, 0.54, 0.59, 0.62, 0.68, 0.75],
    'chocolate': [0.02, 0.04, 0.07, 0.11, 0.16, 0.23, 0.29, 0.43, 0.47, 0.52, 0.54, 0.63, 0.71, 0.72, 0.81],
    'coffee': [0.04, 0.06, 0.10, 0.20, 0.21, 0.26, 0.33, 0.46, 0.51, 0.52, 0.56, 0.58, 0.63, 0.71, 0.77],
    'egg': [0.09, 0.17, 0.19, 0.35, 0.35, 0.46, 0.52, 0.65, 0.69, 0.70, 0.74, 0.78, 0.80, 0.86, 0.90],
    'fish (food)': [0.09, 0.13, 0.18, 0.32, 0.34, 0.35, 0.40, 0.48, 0.52, 0.58, 0.56, 0.57, 0.65, 0.71, 0.74],
    'milk': [0.35, 0.38, 0.49, 0.65, 0.64, 0.71, 0.73, 0.80, 0.85, 0.86, 0.86, 0.90, 0.90, 0.93, 0.96],
    'water (beverage)': [0.23, 0.32, 0.44, 0.55, 0.59, 0.66, 0.69, 0.82, 0.84, 0.84, 0.84, 0.89, 0.89, 0.90, 0.94]
}

# Convert the data to a DataFrame
df = pd.DataFrame(data)

# Create a new figure
p44 = figure(width=800, height=550)
p44.title.text = 'Proportion of Children Producing Each Food/Beverage Type'
p44.xaxis.axis_label = 'Age (Months)'
p44.yaxis.axis_label = 'Proportion of Children Producing'
p44.x_range = Range1d(16, 30)

# Define x-axis ticks
xticks = list(df['age'])
p44.xaxis.ticker = FixedTicker(ticks=xticks)

# Plot each food/beverage type with a unique color
foods_beverages = df.columns[1:]  # Skip 'form' and 'age' columns
for food, color in zip(foods_beverages, Category10[len(foods_beverages)]):
    p44.line(df['age'], df[food], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=food)

# Configure legend
p44.legend.location = "bottom_right"
p44.legend.click_policy = "mute"

# Show the plot
#show(p44)

food_and_drink = [ "banana", "bread", "butter", "chocolate", "coffee", "egg", "fish","milk", "water"]

p4 = figure(width=800, height=550)
p4.title.text = 'Food and drinks'
p4.x_range = Range1d(0,40)
p4.xaxis.axis_label = 'Age Group (Months)'
p4.yaxis.axis_label = 'Cumulative Extended Count'
xticks = np.array([0, 3, 6, 9, 12, 18, 24, 30])
p4.xaxis.ticker = FixedTicker(ticks=xticks)
for word, color in zip(food_and_drink, Category10[10]):
    df = mcdi_df[mcdi_df['Word'] == word]
    p4.line(df['Age_group'], df['Extended Cumulative_count'], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

p4.legend.location = "top_left"
p4.legend.click_policy="mute"

#show(p4)

layout = row(children=[p4,p44], sizing_mode="scale_width")

# Add the layout to a tab
tab4 = Panel(child=layout, title="Food & Drink")

# Data provided
data = {
    "age": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    "diaper": [0.21, 0.30, 0.41, 0.52, 0.53, 0.58, 0.65, 0.76, 0.77, 0.85, 0.84, 0.85, 0.88, 0.91, 0.93],
    "dress (object)": [0.03, 0.05, 0.09, 0.14, 0.18, 0.23, 0.30, 0.39, 0.42, 0.47, 0.52, 0.57, 0.55, 0.66, 0.70],
    "gloves": [0.00, 0.03, 0.05, 0.09, 0.13, 0.13, 0.21, 0.31, 0.35, 0.37, 0.47, 0.43, 0.51, 0.64, 0.68],
    "hat": [0.23, 0.34, 0.46, 0.58, 0.61, 0.67, 0.72, 0.82, 0.82, 0.84, 0.84, 0.85, 0.85, 0.89, 0.95],
    "pants": [0.07, 0.11, 0.20, 0.31, 0.35, 0.45, 0.54, 0.66, 0.71, 0.71, 0.76, 0.81, 0.86, 0.88, 0.92],
    "scarf": [0.00, 0.01, 0.01, 0.05, 0.04, 0.08, 0.08, 0.16, 0.16, 0.18, 0.18, 0.22, 0.26, 0.35, 0.43],
    "shirt": [0.08, 0.12, 0.23, 0.35, 0.39, 0.48, 0.56, 0.67, 0.69, 0.73, 0.75, 0.82, 0.84, 0.86, 0.90],
    "shorts": [0.03, 0.03, 0.08, 0.13, 0.16, 0.25, 0.28, 0.37, 0.44, 0.48, 0.55, 0.58, 0.68, 0.74, 0.75],
    "sock": [0.22, 0.26, 0.41, 0.55, 0.55, 0.60, 0.66, 0.72, 0.78, 0.76, 0.83, 0.84, 0.87, 0.87, 0.91],
}

df = pd.DataFrame(data)

# Create a new figure
p55 = figure(width=800, height=550)
p55.title.text = 'Proportion of Children Producing Each Clothing Type'
p55.xaxis.axis_label = 'Age (Months)'
p55.yaxis.axis_label = 'Proportion of Children Producing'
p55.x_range = Range1d(16, 30)

# Define x-axis ticks
xticks = list(df['age'])
p55.xaxis.ticker = FixedTicker(ticks=xticks)

# Plot each food/beverage type with a unique color
clothing = df.columns[1:]  # Skip 'form' and 'age' columns
for clothes, color in zip(clothing, Category10[len(clothing)]):
    p55.line(df['age'], df[clothes], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=clothes)

# Configure legend
p55.legend.location = "bottom_right"
p55.legend.click_policy = "mute"

# Show the plot
#show(p55)

clothing = ["diaper", "dress", "gloves", "hat", "pants", "scarf", "shirt", "shorts", "sock" ]

p5 = figure(width=800, height=550)
p5.title.text = 'clothing'
p5.x_range = Range1d(0,40)
p5.xaxis.axis_label = 'Age Group (Months)'
p5.yaxis.axis_label = 'Cumulative Extended Count'
xticks = np.array([0, 3, 6, 9, 12, 18, 24, 30])
p5.xaxis.ticker = FixedTicker(ticks=xticks)
for word, color in zip(clothing, Category10[10]):
    df = mcdi_df[mcdi_df['Word'] == word]
    p5.line(df['Age_group'], df['Extended Cumulative_count'], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

p5.legend.location = "top_left"
p5.legend.click_policy="mute"

#show(p5)

layout = row(children=[p5,p55], sizing_mode="scale_width")

# Add the layout to a tab
tab5 = Panel(child=layout, title="Clothing")

data = {
    "age": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    "ear": [0.28, 0.38, 0.49, 0.61, 0.64, 0.69, 0.76, 0.82, 0.86, 0.86, 0.89, 0.90, 0.90, 0.92, 0.95],
    "eye": [0.31, 0.44, 0.58, 0.72, 0.75, 0.79, 0.84, 0.87, 0.92, 0.92, 0.89, 0.94, 0.93, 0.95, 0.96],
    "face": [0.03, 0.08, 0.11, 0.22, 0.23, 0.29, 0.42, 0.48, 0.56, 0.63, 0.64, 0.72, 0.78, 0.80, 0.86],
    "hair": [0.15, 0.28, 0.34, 0.50, 0.53, 0.62, 0.69, 0.78, 0.81, 0.82, 0.82, 0.87, 0.92, 0.91, 0.95],
    "hand": [0.07, 0.13, 0.24, 0.36, 0.42, 0.56, 0.58, 0.73, 0.76, 0.78, 0.81, 0.84, 0.89, 0.92, 0.93],
    "leg": [0.03, 0.08, 0.12, 0.25, 0.29, 0.34, 0.47, 0.58, 0.64, 0.68, 0.68, 0.77, 0.81, 0.83, 0.88],
    "mouth": [0.17, 0.24, 0.34, 0.50, 0.52, 0.58, 0.65, 0.74, 0.77, 0.79, 0.81, 0.86, 0.88, 0.90, 0.91],
    "nose": [0.33, 0.46, 0.54, 0.68, 0.71, 0.76, 0.81, 0.85, 0.89, 0.90, 0.88, 0.92, 0.91, 0.93, 0.96],
    "tooth": [0.08, 0.15, 0.24, 0.41, 0.37, 0.46, 0.53, 0.61, 0.67, 0.76, 0.73, 0.77, 0.79, 0.84, 0.88],
}

# Creating the DataFrame
df = pd.DataFrame(data)

# Create a new figure
p66 = figure(width=800, height=550)
p66.title.text = 'Proportion of Children Producing Each Body_Parts Type'
p66.xaxis.axis_label = 'Age (Months)'
p66.yaxis.axis_label = 'Proportion of Children Producing'
p66.x_range = Range1d(16, 30)

# Define x-axis ticks
xticks = list(df['age'])
p66.xaxis.ticker = FixedTicker(ticks=xticks)

# Plot each food/beverage type with a unique color
body_parts = df.columns[1:]  # Skip 'form' and 'age' columns
for word, color in zip(body_parts, Category10[len(body_parts)]):
    p66.line(df['age'], df[word], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

# Configure legend
p66.legend.location = "bottom_right"
p66.legend.click_policy = "mute"

# Show the plot
#show(p66)

body_parts = ["ear", "eye", "face", "hair", "hand", "leg", "mouth", "nose", "tooth" ]

p6 = figure(width=800, height=550)
p6.title.text = 'Body Parts'
p6.x_range = Range1d(0,40)
p6.xaxis.axis_label = 'Age Group (Months)'
p6.yaxis.axis_label = 'Cumulative Extended Count'
xticks = np.array([0, 3, 6, 9, 12, 18, 24, 30])
p6.xaxis.ticker = FixedTicker(ticks=xticks)
for word, color in zip(body_parts, Category10[10]):
    df = mcdi_df[mcdi_df['Word'] == word]
    p6.line(df['Age_group'], df['Extended Cumulative_count'], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

p6.legend.location = "top_left"
p6.legend.click_policy="mute"

layout = row(children=[p6,p66], sizing_mode="scale_width")

# Add the layout to a tab
tab6 = Panel(child=layout, title="Body Parts")

# Data for the DataFrame
data = {
    'age': [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    'bottle': [0.32, 0.35, 0.40, 0.49, 0.57, 0.61, 0.62, 0.68, 0.69, 0.76, 0.77, 0.80, 0.84, 0.86, 0.91],
    'clock': [0.09, 0.10, 0.19, 0.30, 0.31, 0.36, 0.38, 0.49, 0.48, 0.56, 0.58, 0.60, 0.64, 0.67, 0.79],
    'comb': [0.05, 0.08, 0.11, 0.21, 0.24, 0.28, 0.30, 0.35, 0.41, 0.46, 0.51, 0.55, 0.60, 0.60, 0.69],
    'cup': [0.22, 0.26, 0.40, 0.50, 0.56, 0.61, 0.71, 0.77, 0.78, 0.86, 0.87, 0.91, 0.90, 0.91, 0.94],
    'dish': [0.01, 0.03, 0.06, 0.13, 0.15, 0.21, 0.21, 0.28, 0.30, 0.36, 0.36, 0.48, 0.52, 0.52, 0.61],
    'medicine': [0.03, 0.05, 0.09, 0.20, 0.19, 0.23, 0.30, 0.38, 0.45, 0.54, 0.59, 0.62, 0.64, 0.70, 0.77],
    'money': [0.02, 0.06, 0.10, 0.22, 0.25, 0.30, 0.33, 0.37, 0.45, 0.53, 0.58, 0.61, 0.69, 0.70, 0.72],
    'pillow': [0.05, 0.10, 0.14, 0.29, 0.31, 0.40, 0.43, 0.58, 0.62, 0.66, 0.72, 0.74, 0.82, 0.84, 0.89],
    'spoon': [0.17, 0.20, 0.32, 0.48, 0.51, 0.56, 0.63, 0.73, 0.76, 0.79, 0.80, 0.81, 0.86, 0.87, 0.92],
    'toothbrush': [0.11, 0.13, 0.22, 0.38, 0.38, 0.43, 0.55, 0.68, 0.68, 0.74, 0.75, 0.77, 0.84, 0.86, 0.92]
}

# Creating the DataFrame
df = pd.DataFrame(data)

# Create a new figure
p77 = figure(width=800, height=550)
p77.title.text = 'Proportion of Children Producing Each small_household_items Type'
p77.xaxis.axis_label = 'Age (Months)'
p77.yaxis.axis_label = 'Proportion of Children Producing'
p77.x_range = Range1d(16, 30)

# Define x-axis ticks
xticks = list(df['age'])
p77.xaxis.ticker = FixedTicker(ticks=xticks)

# Plot each food/beverage type with a unique color
small_household_items = df.columns[1:]  # Skip 'form' and 'age' columns
for word, color in zip(small_household_items, Category10[len(small_household_items)]):
    p77.line(df['age'], df[word], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

# Configure legend
p77.legend.location = "bottom_right"
p77.legend.click_policy = "mute"

# Show the plot
#show(p77)

small_household_items = ["bottle", "clock", "comb", "cup", "dish" , "medicine", "money", "pillow", "spoon", "toothbrush"]

p7 = figure(width=800, height=550)
p7.title.text = 'Small household items'
p7.x_range = Range1d(0,40)
p7.xaxis.axis_label = 'Age Group (Months)'
p7.yaxis.axis_label = 'Cumulative Extended Count'
xticks = np.array([0, 3, 6, 9, 12, 18, 24, 30])
p7.xaxis.ticker = FixedTicker(ticks=xticks)
for word, color in zip(small_household_items, Category10[10]):
    df = mcdi_df[mcdi_df['Word'] == word]
    p7.line(df['Age_group'], df['Extended Cumulative_count'], line_width=2, color=color, alpha=0.8,
           muted_color=color, muted_alpha=0.2, legend_label=word)

p7.legend.location = "top_left"
p7.legend.click_policy="mute"

layout = row(children=[p7,p77], sizing_mode="scale_width")

# Add the layout to a tab
tab7 = Panel(child=layout, title="Small Household Items")

# Create the tabs layout
tabs = Tabs(tabs=[tab1, tab2, tab3, tab4, tab5,tab6,tab7])
#show(tabs)

from bokeh.io import output_file, save

# Specify the output HTML file
output_file("bokeh_tabs_layout.html")

# Save the entire layout to HTML
save(tabs)

